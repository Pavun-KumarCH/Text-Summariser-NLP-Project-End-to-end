name: workflow

on:
  push:
    branches:
      - main
    path-ignore:
      - "README.md"
  
permissions:
   id-token: write
   contents: read

jobs:
   integration:
    name: Continuos integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Lint Code
        run: echo "Linting repository"
      
      - name: Run unit tests
        run: echo "Running unit tests"

build-add-push-ecr-image:
   name: Continuos Delivery
   needs: integration
   runs-on: ubuntu-latest
   steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip

      - name: Configure AWS credentials
      - uses: aws-actions/configure-aws-credentials@v1
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id : login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
           ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
           IMAGE_TAG: latest
        run: |  
           # Build a docker container and
           # push it to ECR so that it can
           # be deployed to ECS
           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG.
           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
           echo "::set-output name = image:: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

Continous-Deployment:
  needs: build-add-push-ecr-image
  runs-on: self-hosted
  steps:
      - name: Checkout Code
        uses: actions/checkout@v3 

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id : login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Pull latest images
        run: |
         docker pull ${{ secrets.AWS_ECR_LOGIN_URI}}/${{secretes.ECR_REPOSITORY_NAME}}:latest

        # - name: Stop and remove container if running
        #   run: |
        #     docker ps -q --filter "name=texts" | grep -q .&& docker stop texts && docker rm -fv texta

      - name: Run Docker Image to server users
        run: |
          docker run -d -p 8080:8080 --name=texts -e 'AWS_ACCESS_KEY_ID=${{secrets.AWS_ACCESS_KEY_ID}}' -e 'AWS_SECRET_ACCESS_KEY = ${{secrets.AWS_SECRET_ACCESS_KEY}}' -e 'AWS_REGION = ${{secrets.AWS_REGION}}'
      - name: Clean previous images and containers
        run: |
          docker system prune -f